var documenterSearchIndex = {"docs":
[{"location":"#SpiDy.jl-documentation","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"page"},{"location":"#Noise","page":"SpiDy.jl documentation","title":"Noise","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"spectrum(n::ClassicalNoise)\nspectrum(n::QuantumNoise)\nspectrum(n::NoZeroQuantumNoise)","category":"page"},{"location":"#SpiDy.spectrum-Tuple{ClassicalNoise}","page":"SpiDy.jl documentation","title":"SpiDy.spectrum","text":"spectrum(n::ClassicalNoise)\n\nReturns the classical noise at temperature n.T as a function of ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.spectrum-Tuple{QuantumNoise}","page":"SpiDy.jl documentation","title":"SpiDy.spectrum","text":"spectrum(n::QuantumNoise)\n\nReturns the quantum noise at temperature n.T as a function of ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.spectrum-Tuple{NoZeroQuantumNoise}","page":"SpiDy.jl documentation","title":"SpiDy.spectrum","text":"spectrum(n::NoZeroQuantumNoise)\n\nReturns the quantum noise at temperature n.T as a function of ω. It differs from spectrum(n::QuantumNoise) in the fact that the zero-point fluctuations are removed.\n\n\n\n\n\n","category":"method"},{"location":"#Spectral-density","page":"SpiDy.jl documentation","title":"Spectral density","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"sd(J::GenericSD)\nsdoverω(J::GenericSD)\nsdoverω(J::LorentzianSD)\nreorgenergy(J::GenericSD)\nreorgenergy(J::LorentzianSD)\nkernel(J::LorentzianSD)\npsd(J::GenericSD, noise::Noise)\npsd(J::LorentzianSD, noise::ClassicalNoise)","category":"page"},{"location":"#SpiDy.sd-Tuple{GenericSD}","page":"SpiDy.jl documentation","title":"SpiDy.sd","text":"sd(J::GenericSD)\n\nSpectral density for generic shapes.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.sdoverω-Tuple{GenericSD}","page":"SpiDy.jl documentation","title":"SpiDy.sdoverω","text":"sdoverω(J::GenericSD)\n\nSpectral-density-divided-by-ω for generic shapes.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.sdoverω-Tuple{LorentzianSD}","page":"SpiDy.jl documentation","title":"SpiDy.sdoverω","text":"sdoverω(J::LorentzianSD)\n\nSpectral density divided by ω which naturally defines sd(J::LorentzianSD).\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.reorgenergy-Tuple{GenericSD}","page":"SpiDy.jl documentation","title":"SpiDy.reorgenergy","text":"reorgenergy(J::GenericSD)\n\nReorganization energy numerically integrated as int_0^infty textsdoverω(omega)domega.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.reorgenergy-Tuple{LorentzianSD}","page":"SpiDy.jl documentation","title":"SpiDy.reorgenergy","text":"reorgenergy(J::LorentzianSD)\n\nAnalytical reorganization energy for Lorentzian spectral density.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.kernel-Tuple{LorentzianSD}","page":"SpiDy.jl documentation","title":"SpiDy.kernel","text":"kernel(J::LorentzianSD)\n\nSpecific damping kernel for a Lorentzian spectral density defined by the parameters in J. It returns a function depending on ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.psd-Tuple{GenericSD, Noise}","page":"SpiDy.jl documentation","title":"SpiDy.psd","text":"psd(J::GenericSD, noise::Noise)\n\nPower spectral density depending on parameters J and noise. It returns a function of ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.psd-Tuple{LorentzianSD, ClassicalNoise}","page":"SpiDy.jl documentation","title":"SpiDy.psd","text":"psd(J::LorentzianSD, noise::ClassicalNoise)\n\nReturns the analytical expression for power spectrum depending on Lorentzian spectral density and Classical noise.\n\n\n\n\n\n","category":"method"},{"location":"#Stochastic-field","page":"SpiDy.jl documentation","title":"Stochastic field","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"bfield(N, Δt, J::GenericSD, noise::Noise, distro=nothing)","category":"page"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"<!– ## Spin state","category":"page"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"page"},{"location":"#Coupling-function","page":"SpiDy.jl documentation","title":"Coupling function","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"page"},{"location":"#Dynamics","page":"SpiDy.jl documentation","title":"Dynamics","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"diffeqsolver(N, Δt, J::GenericSD, noise::Noise, distro=nothing)","category":"page"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"–>","category":"page"},{"location":"#Index","page":"SpiDy.jl documentation","title":"Index","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"page"}]
}
