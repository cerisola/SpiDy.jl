var documenterSearchIndex = {"docs":
[{"location":"#SpiDy.jl-documentation","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"page"},{"location":"#Noise","page":"SpiDy.jl documentation","title":"Noise","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"spectrum(n::ClassicalNoise)\nspectrum(n::QuantumNoise)\nspectrum(n::NoZeroQuantumNoise)","category":"page"},{"location":"#SpiDy.spectrum-Tuple{ClassicalNoise}","page":"SpiDy.jl documentation","title":"SpiDy.spectrum","text":"spectrum(n::ClassicalNoise)\n\nReturns the classical noise at temperature n.T as a function of ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.spectrum-Tuple{QuantumNoise}","page":"SpiDy.jl documentation","title":"SpiDy.spectrum","text":"spectrum(n::QuantumNoise)\n\nReturns the quantum noise at temperature n.T as a function of ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.spectrum-Tuple{NoZeroQuantumNoise}","page":"SpiDy.jl documentation","title":"SpiDy.spectrum","text":"spectrum(n::NoZeroQuantumNoise)\n\nReturns the quantum noise at temperature n.T as a function of ω. It differs from spectrum(n::QuantumNoise) in the fact that the zero-point fluctuations are removed.\n\n\n\n\n\n","category":"method"},{"location":"#Spectral-density","page":"SpiDy.jl documentation","title":"Spectral density","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"sd(J::GenericSD)\nsdoverω(J::GenericSD)\nsdoverω(J::LorentzianSD)\nreorgenergy(J::GenericSD)\nreorgenergy(J::LorentzianSD)\nkernel(J::LorentzianSD)\npsd(J::GenericSD, noise::Noise)\npsd(J::LorentzianSD, noise::ClassicalNoise)","category":"page"},{"location":"#SpiDy.sd-Tuple{GenericSD}","page":"SpiDy.jl documentation","title":"SpiDy.sd","text":"sd(J::GenericSD)\n\nSpectral density for generic shapes.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.sdoverω-Tuple{GenericSD}","page":"SpiDy.jl documentation","title":"SpiDy.sdoverω","text":"sdoverω(J::GenericSD)\n\nSpectral-density-divided-by-ω for generic shapes.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.sdoverω-Tuple{LorentzianSD}","page":"SpiDy.jl documentation","title":"SpiDy.sdoverω","text":"sdoverω(J::LorentzianSD)\n\nSpectral density divided by ω which naturally defines sd(J::LorentzianSD).\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.reorgenergy-Tuple{GenericSD}","page":"SpiDy.jl documentation","title":"SpiDy.reorgenergy","text":"reorgenergy(J::GenericSD)\n\nReorganization energy numerically integrated as int_0^infty textsdoverω(omega)domega.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.reorgenergy-Tuple{LorentzianSD}","page":"SpiDy.jl documentation","title":"SpiDy.reorgenergy","text":"reorgenergy(J::LorentzianSD)\n\nAnalytical reorganization energy for Lorentzian spectral density.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.kernel-Tuple{LorentzianSD}","page":"SpiDy.jl documentation","title":"SpiDy.kernel","text":"kernel(J::LorentzianSD)\n\nSpecific damping kernel for a Lorentzian spectral density defined by the parameters in J. It returns a function depending on ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.psd-Tuple{GenericSD, Noise}","page":"SpiDy.jl documentation","title":"SpiDy.psd","text":"psd(J::GenericSD, noise::Noise){:.Julia}\n\nPower spectral density depending on parameters J and noise. It returns a function of ω.\n\n\n\n\n\n","category":"method"},{"location":"#SpiDy.psd-Tuple{LorentzianSD, ClassicalNoise}","page":"SpiDy.jl documentation","title":"SpiDy.psd","text":"psd(J::LorentzianSD, noise::ClassicalNoise){:.Julia}\n\nReturns the analytical expression for power spectrum depending on Lorentzian spectral density and Classical noise.\n\n\n\n\n\n","category":"method"},{"location":"#Stochastic-field","page":"SpiDy.jl documentation","title":"Stochastic field","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"bfield(N, Δt, J::GenericSD, noise::Noise; distro=Normal(0., 1/sqrt(Δt)), interpolation=true)","category":"page"},{"location":"#SpiDy.bfield-Tuple{Any, Any, GenericSD, Noise}","page":"SpiDy.jl documentation","title":"SpiDy.bfield","text":"bfield(N, Δt, J::GenericSD, noise::Noise, distro=nothing)\n\nReturns the stochastic field b(t). It is evaluated using the Lorentzian spectral density defined by the parameters J, the classical/quantum/quantum-no-zero-energy noise. The sampling of the stochastic noise is done in frequency space. The default stochastic noise is white noise having Gaussian distribution but different distributions can be specified. N defines the number of steps and Δt defines the time step.\n\n\n\n\n\n","category":"method"},{"location":"#Coupling-tensor","page":"SpiDy.jl documentation","title":"Coupling tensor","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"AnisoCoupling{TT<:AbstractMatrix{T} where {T<:Real}}\nIsoCoupling{TT<:Real}","category":"page"},{"location":"#SpiDy.AnisoCoupling","page":"SpiDy.jl documentation","title":"SpiDy.AnisoCoupling","text":"AnisoCoupling{TT<:AbstractMatrix{T} where {T<:Real}}\n\nReturns an object of type Coupling built by passing it a 3x3 Matrix{Real} which defines the n-dimentional coupling between the spin and the stochastic fields. The matrix  can therefore define a 1D, 2D as well as a 3D coupling. \n\n\n\n\n\n","category":"type"},{"location":"#SpiDy.IsoCoupling","page":"SpiDy.jl documentation","title":"SpiDy.IsoCoupling","text":"IsoCoupling{TT<:Real}\n\nReturns an object of type Coupling built by passing it a single Real value which defines the n-dimentional isotropic coupling between the spin and the stochastic fields.\n\n\n\n\n\n","category":"type"},{"location":"#Dynamics","page":"SpiDy.jl documentation","title":"Dynamics","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"diffeqsolver(s0, tspan, J::LorentzianSD, bfields, matrix::Coupling; S0=1/2, Bext=[0, 0, 1])","category":"page"},{"location":"#SpiDy.diffeqsolver-Tuple{Any, Any, LorentzianSD, Any, Coupling}","page":"SpiDy.jl documentation","title":"SpiDy.diffeqsolver","text":"diffeqsolver(s0, tspan, J::LorentzianSD, bfields, matrix::Coupling; S0=1/2, Bext=[0, 0, 1])\n\nReturns [sol.t, s, sinterp], that is, the vector sol.t of time steps at which the solutions are evaluated, the 3-vector of the solutions s[1], s[2], s[3] evaluated at times sol.t, the 3 functions sinterp(t)[i] interpolations of the solutions s[i] found in the give time span.\n\nThe differential equation solver is built to account for Lorentzian spectral density. The two keyword arguments of  the function are the spin length S0 set at default value 1/2 and the vector of the external magnetic field Bext set as unit-vector along the z-axis direction as default, Bext = [0, 0, 1].\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"SpiDy.jl documentation","title":"Index","text":"","category":"section"},{"location":"","page":"SpiDy.jl documentation","title":"SpiDy.jl documentation","text":"","category":"page"}]
}
